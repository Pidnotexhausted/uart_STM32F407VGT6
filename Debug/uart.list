
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800052c  08000534  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800052c  0800052c  00010534  2**0
                  CONTENTS
  4 .ARM          00000000  0800052c  0800052c  00010534  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800052c  08000534  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010534  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010534  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e63  00000000  00000000  00010564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000039e  00000000  00000000  000113c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00011768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000088  00000000  00000000  00011828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182f0  00000000  00000000  000118b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fc8  00000000  00000000  00029ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008819d  00000000  00000000  0002ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b2d05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001b8  00000000  00000000  000b2d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000514 	.word	0x08000514

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000514 	.word	0x08000514

080001e8 <TIM6_Config>:
#include "Delay.h"

void TIM6_Config(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
		 */

		// Timer period is 1us -> f = 1MHz. f_system = 64MHz. Choose Prescaler =

		// 1. Enable clock for timer
		RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 80001ec:	4b12      	ldr	r3, [pc, #72]	; (8000238 <TIM6_Config+0x50>)
 80001ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001f0:	4a11      	ldr	r2, [pc, #68]	; (8000238 <TIM6_Config+0x50>)
 80001f2:	f043 0310 	orr.w	r3, r3, #16
 80001f6:	6413      	str	r3, [r2, #64]	; 0x40

		// 2. Set prescaler for timer and the ARR
		TIM6->ARR = 0xFFFF;
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <TIM6_Config+0x54>)
 80001fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001fe:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM6->PSC = 64 - 1;
 8000200:	4b0e      	ldr	r3, [pc, #56]	; (800023c <TIM6_Config+0x54>)
 8000202:	223f      	movs	r2, #63	; 0x3f
 8000204:	629a      	str	r2, [r3, #40]	; 0x28

		// 3. Enable timer and wait for update flag to set
		TIM6->CR1 |= 1;
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <TIM6_Config+0x54>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a0c      	ldr	r2, [pc, #48]	; (800023c <TIM6_Config+0x54>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6013      	str	r3, [r2, #0]
		while(!(TIM6->SR & 1)){} //wait for update flag set (UEV need to be updated to get new psc and arr
 8000212:	bf00      	nop
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <TIM6_Config+0x54>)
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	f003 0301 	and.w	r3, r3, #1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d0f9      	beq.n	8000214 <TIM6_Config+0x2c>
		TIM6->SR &= ~1; //clear flag
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <TIM6_Config+0x54>)
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	4a05      	ldr	r2, [pc, #20]	; (800023c <TIM6_Config+0x54>)
 8000226:	f023 0301 	bic.w	r3, r3, #1
 800022a:	6113      	str	r3, [r2, #16]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40001000 	.word	0x40001000

08000240 <Delay_us>:

void Delay_us(uint16_t us){
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	80fb      	strh	r3, [r7, #6]
	 * 1. reset counter
	 * 2. wait for the counter reach to the value
	 */

	// 1. reset counter
	TIM6->CNT = 0;
 800024a:	4b08      	ldr	r3, [pc, #32]	; (800026c <Delay_us+0x2c>)
 800024c:	2200      	movs	r2, #0
 800024e:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM6->CNT < us){}
 8000250:	bf00      	nop
 8000252:	4b06      	ldr	r3, [pc, #24]	; (800026c <Delay_us+0x2c>)
 8000254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	429a      	cmp	r2, r3
 800025a:	d3fa      	bcc.n	8000252 <Delay_us+0x12>
}
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40001000 	.word	0x40001000

08000270 <Delay_ms>:


void Delay_ms(uint16_t ms){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i < ms; i++){
 800027a:	2300      	movs	r3, #0
 800027c:	81fb      	strh	r3, [r7, #14]
 800027e:	e006      	b.n	800028e <Delay_ms+0x1e>
		Delay_us(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f7ff ffdc 	bl	8000240 <Delay_us>
	for(uint16_t i = 0; i < ms; i++){
 8000288:	89fb      	ldrh	r3, [r7, #14]
 800028a:	3301      	adds	r3, #1
 800028c:	81fb      	strh	r3, [r7, #14]
 800028e:	89fa      	ldrh	r2, [r7, #14]
 8000290:	88fb      	ldrh	r3, [r7, #6]
 8000292:	429a      	cmp	r2, r3
 8000294:	d3f4      	bcc.n	8000280 <Delay_ms+0x10>
	}
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <SysClockConfig>:
#include <stdint.h>
#include <stm32f4xx.h>
#include <Delay.h>

void SysClockConfig(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

	// select HSE (8MHz in system_stm32f4xx.c and in schematics), expected systemclock is 64Mhz, select PLL (M=25, N=128, 	P=2)


	// 1. Enabel HSE and wait HSE become ready
	RCC->CR |= RCC_CR_HSEON;
 80002a4:	4b2d      	ldr	r3, [pc, #180]	; (800035c <SysClockConfig+0xbc>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a2c      	ldr	r2, [pc, #176]	; (800035c <SysClockConfig+0xbc>)
 80002aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ae:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY)){}
 80002b0:	bf00      	nop
 80002b2:	4b2a      	ldr	r3, [pc, #168]	; (800035c <SysClockConfig+0xbc>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <SysClockConfig+0x12>

	// 2. Set the power enable clock and voltage regulator
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002be:	4b27      	ldr	r3, [pc, #156]	; (800035c <SysClockConfig+0xbc>)
 80002c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002c2:	4a26      	ldr	r2, [pc, #152]	; (800035c <SysClockConfig+0xbc>)
 80002c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002c8:	6413      	str	r3, [r2, #64]	; 0x40
	//because I just want to run at 64MHz, I choose scale 2 mode (<144MHz) to save energy
	PWR->CR &= ~(1 << 14);
 80002ca:	4b25      	ldr	r3, [pc, #148]	; (8000360 <SysClockConfig+0xc0>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a24      	ldr	r2, [pc, #144]	; (8000360 <SysClockConfig+0xc0>)
 80002d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80002d4:	6013      	str	r3, [r2, #0]

	// 3. Config the Flash prefetch and LATENCY Related Settings
	FLASH->ACR = FLASH_ACR_LATENCY_2WS | FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 80002d6:	4b23      	ldr	r3, [pc, #140]	; (8000364 <SysClockConfig+0xc4>)
 80002d8:	f240 7202 	movw	r2, #1794	; 0x702
 80002dc:	601a      	str	r2, [r3, #0]

	// 4. Config the prescaler HCLK, PCKL1, PCKL2
	RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 80002de:	4b1f      	ldr	r3, [pc, #124]	; (800035c <SysClockConfig+0xbc>)
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	4a1e      	ldr	r2, [pc, #120]	; (800035c <SysClockConfig+0xbc>)
 80002e4:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80002e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002ec:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; //SET AHB PRESCALER
 80002ee:	4b1b      	ldr	r3, [pc, #108]	; (800035c <SysClockConfig+0xbc>)
 80002f0:	4a1a      	ldr	r2, [pc, #104]	; (800035c <SysClockConfig+0xbc>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; //SET APB1 PRESCALER
 80002f6:	4b19      	ldr	r3, [pc, #100]	; (800035c <SysClockConfig+0xbc>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	4a18      	ldr	r2, [pc, #96]	; (800035c <SysClockConfig+0xbc>)
 80002fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000300:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; //SET APB2 PRESCALER
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <SysClockConfig+0xbc>)
 8000304:	4a15      	ldr	r2, [pc, #84]	; (800035c <SysClockConfig+0xbc>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	6093      	str	r3, [r2, #8]

	//5. Config the main PLL
	RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSE | (0 << 16) | (64 << 6) | (4 << 0));
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <SysClockConfig+0xbc>)
 800030c:	4a16      	ldr	r2, [pc, #88]	; (8000368 <SysClockConfig+0xc8>)
 800030e:	605a      	str	r2, [r3, #4]

	// 6. Enable PLL and wait for it become ready
	RCC->CR |= RCC_CR_PLLON;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <SysClockConfig+0xbc>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <SysClockConfig+0xbc>)
 8000316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800031a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 800031c:	bf00      	nop
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <SysClockConfig+0xbc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <SysClockConfig+0x7e>

	// 7. Select the clock source and wait for it to be set
	RCC->CFGR &= ~RCC_CFGR_SW;
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <SysClockConfig+0xbc>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <SysClockConfig+0xbc>)
 8000330:	f023 0303 	bic.w	r3, r3, #3
 8000334:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <SysClockConfig+0xbc>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4a08      	ldr	r2, [pc, #32]	; (800035c <SysClockConfig+0xbc>)
 800033c:	f043 0302 	orr.w	r3, r3, #2
 8000340:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){}
 8000342:	bf00      	nop
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <SysClockConfig+0xbc>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f003 030c 	and.w	r3, r3, #12
 800034c:	2b08      	cmp	r3, #8
 800034e:	d1f9      	bne.n	8000344 <SysClockConfig+0xa4>
}
 8000350:	bf00      	nop
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	40023800 	.word	0x40023800
 8000360:	40007000 	.word	0x40007000
 8000364:	40023c00 	.word	0x40023c00
 8000368:	00401004 	.word	0x00401004

0800036c <Uart2_Config>:

void Uart2_Config(void){
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	 */

	// APB1 clock for uart max is 45MHz, systemclock is 64MHz, so APB1 for uart is 32MHz.

	// 1. Enable uart clock and gpio clock
	RCC->APB1ENR |= 1<<17; //enable clock for uart
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <Uart2_Config+0x8c>)
 8000372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000374:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <Uart2_Config+0x8c>)
 8000376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037a:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= 1<<0; //enable clock for gpioA
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <Uart2_Config+0x8c>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a1d      	ldr	r2, [pc, #116]	; (80003f8 <Uart2_Config+0x8c>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6313      	str	r3, [r2, #48]	; 0x30

	// 2. Config the uart pins for alternate function
	GPIOA->MODER |= 0b1010 << 4; //turn on alternate function mode of PA2 and PA3
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <Uart2_Config+0x90>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <Uart2_Config+0x90>)
 800038e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000392:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= 0b1111 << 4; //choose high speed for PA2 and PA3
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <Uart2_Config+0x90>)
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	4a18      	ldr	r2, [pc, #96]	; (80003fc <Uart2_Config+0x90>)
 800039a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800039e:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= 0x77 << 8; //AFRL function uart for pin2 and pin3
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <Uart2_Config+0x90>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a15      	ldr	r2, [pc, #84]	; (80003fc <Uart2_Config+0x90>)
 80003a6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80003aa:	6213      	str	r3, [r2, #32]

	// 3. enable uart by writting UE bit in USART_CR1 register to 1
	USART2->CR1 |= 0x00;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <Uart2_Config+0x94>)
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <Uart2_Config+0x94>)
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= 1<<13;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <Uart2_Config+0x94>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <Uart2_Config+0x94>)
 80003ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003be:	60d3      	str	r3, [r2, #12]

	// 4. program M bit in USART_CR1 and define the word length
	USART2->CR1 &= ~(1<<12); //M=0, 8bits word length
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <Uart2_Config+0x94>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <Uart2_Config+0x94>)
 80003c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003ca:	60d3      	str	r3, [r2, #12]

	// 5. select the desired baud rate using USART_BRR register
	//I choose baud rate is 115200bps, so 32.10^6/(8*2*115200)=17.36
	//0.36*16=5.76 --> choose 6
	USART2->BRR = (6<<0) | (17 << 4);
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <Uart2_Config+0x94>)
 80003ce:	f44f 728b 	mov.w	r2, #278	; 0x116
 80003d2:	609a      	str	r2, [r3, #8]

	// 6. Enable transmitter/receiver by setting the TE and RE bits in USART_CR1 register.
	USART2->CR1 |= 1<<2; //RE=1
 80003d4:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <Uart2_Config+0x94>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a09      	ldr	r2, [pc, #36]	; (8000400 <Uart2_Config+0x94>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= 1<<3; //TE=1
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <Uart2_Config+0x94>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a06      	ldr	r2, [pc, #24]	; (8000400 <Uart2_Config+0x94>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	60d3      	str	r3, [r2, #12]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40023800 	.word	0x40023800
 80003fc:	40020000 	.word	0x40020000
 8000400:	40004400 	.word	0x40004400

08000404 <USART2_sendChar>:

void USART2_sendChar(uint8_t c){
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]
	 * to be transmitted in case of single buffer.
	 * 2. After writing the last data into the UART_DR register, wait until TC=1, this indicates
	 * that the transmission of the last frame is completed.
	 */

	USART2->DR = c;
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <USART2_sendChar+0x2c>)
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	6053      	str	r3, [r2, #4]
	while(!(USART2->SR & (1<<6))){}
 8000414:	bf00      	nop
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <USART2_sendChar+0x2c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f9      	beq.n	8000416 <USART2_sendChar+0x12>
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40004400 	.word	0x40004400

08000434 <main>:
		USART2_sendChar((uint8_t)*string++);
	}
}

int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	SysClockConfig();
 8000438:	f7ff ff32 	bl	80002a0 <SysClockConfig>
	TIM6_Config();
 800043c:	f7ff fed4 	bl	80001e8 <TIM6_Config>
	Uart2_Config();
 8000440:	f7ff ff94 	bl	800036c <Uart2_Config>

	while(1){
		USART2_sendChar('G');
 8000444:	2047      	movs	r0, #71	; 0x47
 8000446:	f7ff ffdd 	bl	8000404 <USART2_sendChar>
		Delay_ms(1500);
 800044a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800044e:	f7ff ff0f 	bl	8000270 <Delay_ms>
		USART2_sendChar('G');
 8000452:	e7f7      	b.n	8000444 <main+0x10>

08000454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <SystemInit+0x20>)
 800045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <SystemInit+0x20>)
 8000460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800047c:	f7ff ffea 	bl	8000454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	; (80004b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	; (80004c4 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a6:	f000 f811 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff ffc3 	bl	8000434 <main>

080004ae <LoopForever>:

LoopForever:
  b LoopForever
 80004ae:	e7fe      	b.n	80004ae <LoopForever>
  ldr   r0, =_estack
 80004b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004bc:	08000534 	.word	0x08000534
  ldr r2, =_sbss
 80004c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c4:	2000001c 	.word	0x2000001c

080004c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC_IRQHandler>
	...

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	4d0d      	ldr	r5, [pc, #52]	; (8000504 <__libc_init_array+0x38>)
 80004d0:	4c0d      	ldr	r4, [pc, #52]	; (8000508 <__libc_init_array+0x3c>)
 80004d2:	1b64      	subs	r4, r4, r5
 80004d4:	10a4      	asrs	r4, r4, #2
 80004d6:	2600      	movs	r6, #0
 80004d8:	42a6      	cmp	r6, r4
 80004da:	d109      	bne.n	80004f0 <__libc_init_array+0x24>
 80004dc:	4d0b      	ldr	r5, [pc, #44]	; (800050c <__libc_init_array+0x40>)
 80004de:	4c0c      	ldr	r4, [pc, #48]	; (8000510 <__libc_init_array+0x44>)
 80004e0:	f000 f818 	bl	8000514 <_init>
 80004e4:	1b64      	subs	r4, r4, r5
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	2600      	movs	r6, #0
 80004ea:	42a6      	cmp	r6, r4
 80004ec:	d105      	bne.n	80004fa <__libc_init_array+0x2e>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f4:	4798      	blx	r3
 80004f6:	3601      	adds	r6, #1
 80004f8:	e7ee      	b.n	80004d8 <__libc_init_array+0xc>
 80004fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fe:	4798      	blx	r3
 8000500:	3601      	adds	r6, #1
 8000502:	e7f2      	b.n	80004ea <__libc_init_array+0x1e>
 8000504:	0800052c 	.word	0x0800052c
 8000508:	0800052c 	.word	0x0800052c
 800050c:	0800052c 	.word	0x0800052c
 8000510:	08000530 	.word	0x08000530

08000514 <_init>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr

08000520 <_fini>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	bf00      	nop
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr
